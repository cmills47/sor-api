// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace SiteOfRefuge.API
{
    /// <summary> The language(s) spoken by this person. </summary>
    public readonly partial struct SpokenLanguages : IEquatable<SpokenLanguages>
    {
        private readonly string _value;
        public string Value { get { return this.Value; } }

        public SpokenLanguages() { this._value = null; }

        /// <summary> Determines if two <see cref="SpokenLanguages"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SpokenLanguages(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnglishValue = "English";
        private const string UkrainianValue = "Ukrainian";
        private const string PolishValue = "Polish";
        private const string RussianValue = "Russian";
        private const string SlovakValue = "Slovak";
        private const string HungarianValue = "Hungarian";
        private const string RomanianValue = "Romanian";
        private const string OtherValue = "Other";

        /// <summary> English. </summary>
        public static SpokenLanguages English { get; } = new SpokenLanguages(EnglishValue);
        /// <summary> Ukrainian. </summary>
        public static SpokenLanguages Ukrainian { get; } = new SpokenLanguages(UkrainianValue);
        /// <summary> Polish. </summary>
        public static SpokenLanguages Polish { get; } = new SpokenLanguages(PolishValue);
        /// <summary> Russian. </summary>
        public static SpokenLanguages Russian { get; } = new SpokenLanguages(RussianValue);
        /// <summary> Slovak. </summary>
        public static SpokenLanguages Slovak { get; } = new SpokenLanguages(SlovakValue);
        /// <summary> Hungarian. </summary>
        public static SpokenLanguages Hungarian { get; } = new SpokenLanguages(HungarianValue);
        /// <summary> Romanian. </summary>
        public static SpokenLanguages Romanian { get; } = new SpokenLanguages(RomanianValue);
        /// <summary> Other. </summary>
        public static SpokenLanguages Other { get; } = new SpokenLanguages(OtherValue);
        /// <summary> Determines if two <see cref="SpokenLanguages"/> values are the same. </summary>
        public static bool operator ==(SpokenLanguages left, SpokenLanguages right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SpokenLanguages"/> values are not the same. </summary>
        public static bool operator !=(SpokenLanguages left, SpokenLanguages right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SpokenLanguages"/>. </summary>
        public static implicit operator SpokenLanguages(string value) => new SpokenLanguages(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SpokenLanguages other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SpokenLanguages other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
