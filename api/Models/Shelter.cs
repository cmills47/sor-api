// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace SiteOfRefuge.API
{
    /// <summary> The type of shelter being offered. </summary>
    internal readonly partial struct Shelter : IEquatable<Shelter>
    {
        private readonly string _value;

        public Shelter() { this._value = null; }

        /// <summary> Determines if two <see cref="Shelter"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Shelter(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HouseWithSeveralRoomsValue = "House with several rooms";
        private const string IndependentApartmentValue = "Independent apartment";
        private const string RoomInAHouseOfAnApartmentWhereYouLiveValue = "Room in a house of an apartment where you live";
        private const string ABedInASharedRoomValue = "A bed in a shared room";
        private const string ASpaceInAHotelHostelValue = "A space in a hotel/hostel";

        /// <summary> House with several rooms. </summary>
        public static Shelter HouseWithSeveralRooms { get; } = new Shelter(HouseWithSeveralRoomsValue);
        /// <summary> Independent apartment. </summary>
        public static Shelter IndependentApartment { get; } = new Shelter(IndependentApartmentValue);
        /// <summary> Room in a house of an apartment where you live. </summary>
        public static Shelter RoomInAHouseOfAnApartmentWhereYouLive { get; } = new Shelter(RoomInAHouseOfAnApartmentWhereYouLiveValue);
        /// <summary> A bed in a shared room. </summary>
        public static Shelter ABedInASharedRoom { get; } = new Shelter(ABedInASharedRoomValue);
        /// <summary> A space in a hotel/hostel. </summary>
        public static Shelter ASpaceInAHotelHostel { get; } = new Shelter(ASpaceInAHotelHostelValue);
        /// <summary> Determines if two <see cref="Shelter"/> values are the same. </summary>
        public static bool operator ==(Shelter left, Shelter right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Shelter"/> values are not the same. </summary>
        public static bool operator !=(Shelter left, Shelter right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Shelter"/>. </summary>
        public static implicit operator Shelter(string value) => new Shelter(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Shelter other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Shelter other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
